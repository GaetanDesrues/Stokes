//verbosity 0;

// Trace de l'éxécution dans un fichier
ofstream tfile("output/stokes_trace_umfpack.txt");
// Fichier de sortie sous forme de tableau pour tracé gnuplot
ofstream gfile("output/stokes_errors_umfpack.txt");

tfile << "Probleme de Stokes" << endl;

gfile << "# Resolution de -\nu Laplacien(u) + \grad(p) = f avec div(u)=0 et u = g au bord" << endl;
gfile << "# sur le carre [0,1]x[0,1] en elements finis P1 Lagrange" << endl;
gfile << "# sur une suite de maillages" << endl;
gfile << "# et pour une solution analytique quadratique en x et y" << endl;

gfile << "# pas h, erreur L^2 relative, erreur relative L^2 sur le gradient, temps CPU" << endl;

// Définition des bord du domaine de calcul carré 1x1
border Gamma1(t=0,1) {x=t; y=0;};
border Gamma2(t=0,1) {x=1-t; y=t;};
border Gamma3(t=0,1) {x=0; y=1-t;};
// border Gamma4(t=0,1) {x=0; y=1-t;};

// Triangle de sommets (0,0), (1,0), (0,1)
// border Gamma1(t=0,1) {x=t; y=0;};
// border Gamma2(t=0,1) {x=1-t; y=t;};
// border Gamma3(t=0,1) {x=0; y=1-t;};

// Boucle sur une famille de maillages de plus en plus fins
for (int k=0;k<3;++k) // Pour k=7, ça devient trop gros
  {
    // Construction du maillage
    int n = 10*2^k; // Nombre de points par côté
    real t1 = clock(); // Pour mesure du temps cpu
    mesh Th = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n));

    tfile << "k = " << k << endl;
    tfile << "  Nombre de sommets par cote : " << n << endl;
    tfile << "  Nombre de sommets dans le maillage : " << Th.nv << endl;
    tfile << "  Nombre de triangles dans le maillage : " << Th.nt << endl;

    // Affichage et sortie fichierdu maillage seul
    // plot(Gamma1(n)+Gamma2(n)+Gamma3(n));
    // plot(Th, wait=1, ps="laplace.eps");

    // Définition de l'espace de discrétisation. Ici on discrétise
    // V=H^1_0(\Omega) avec des éléments finis P1-Lagrange
    fespace Vh(Th,P1);
    tfile << "  Nombre de degres de liberte : " << Vh.ndof << endl;

    cout << "*** k = " << k << " --> n = " << n << " , #DOf = " << Vh.ndof << " ***" << endl;

    // Définition de la formulation variationnelle dans Vh

    // On a besoin de 2 fonctions u et v dans Vh
    Vh u1, u2, p, v1, v2, q;
    // D'une fonction definie de manière analytique (pour le second membre)
    func f1 = 1;
    func f2 = 1;
    // Qui respecte les conditions aux limites

    func g = 0;

    func solExacteX = x;
    func solExacteY = -y;

    real nu=1.;

    // varf aF(u,v)=int2d(Th)(  f*v );

    // Voici finalement notre problème, avec son solveur linéaire
    problem Stokes([u1,u2,p],[v1,v2,q], solver=Crout) =
      int2d(Th)(nu*(dx(u1)*dx(v1) +dy(u1)*dy(v1)+dx(u2)*dx(v2)
      + dy(u2)*dy(v2)) + p*q*(0.000001) /*ne pas oublier ce terme*/
      - p*dx(v1) - p*dy(v2) - dx(u1)*q - dy(u2)*q )
      - int2d(Th) (f1*v1 + f2*v2)
      + on(Gamma1, Gamma2, Gamma3, u1=solExacteX, u2=solExacteY);

    // Résolution du système linéaire
    Stokes;

    // Visualisation de la solution
    plot([u1, u2], fill=true,value=true,boundary=true,wait=true);

    // Solution exacte projetee dans Vh
    // Vh ue;
    // ue = x*(1-x)*y*(1-y); // Expression de la solution exacte

    // Calcul des erreurs
    // real normeL2, errL2;
    // normeL2 = sqrt( int2d(Th) ( (ue)^2 ) );
    // errL2 = sqrt( int2d(Th) ( (u-ue)^2 ) );
    //
    // real t2 = clock(); // Pour mesure du temps cpu
    //
    // tfile << "  Erreur L2 relative : " << errL2/normeL2 << endl;
    // tfile << "  Temps CPU total : " << t2-t1 << endl;
    //
    // gfile << 1./n << "  " << errL2/normeL2 << "  " << t2-t1 << endl;
  }
