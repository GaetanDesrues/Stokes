load "msh3"
// int N;
//Cube unitaire
//z in [0,1] carré de côté N
// mesh T2d=square(N,N);
// mesh3 Th=buildlayers(T2d,N, zbound=[0,1]);



for (int k=0;k<5;++k) // Pour k=7, ça devient trop gros
{
  int n = 10*2^k;
  mesh T2d=square(n,n);
  mesh3 Th=buildlayers(T2d,n, zbound=[0,1]);
  if (k==0)
  {
    //Plot cube 3D
    plot(Th);
  }
  //espaces EF
  fespace VVh(Th,[P2,P2,P2,P1]);
  //Macro pour  l e  gradient  et  la  divergence
  macro Grad(u) [dx(u) , dy(u ) , dz (u ) ]//
  macro  div(u1,u2,u3)  (dx( u1)+dy( u2)+dz ( u3 ))//

  //Forme variationnelle
  varf Stokes([u1,u2,u3,p],[v1,v2,v3,q]) = int3d(Th)(Grad(u1)'*Grad(v1)+Grad(u2)'*Grad(v2)
  + Grad(u3)'*Grad(v3) - div(u1,u2,u3)*q - div(v1,v2,v3)*p -1e-10*q*p)
  + int3d(Th)(v1+v2+v3)
  +on(1,2,3,4,5,6,u1=x, u2=y, u3=-2*z);

  matrix A=Stokes(VVh,VVh);

  set(A,solver=UMFPACK);

  //Solve system
  real[int] b = Stokes(0,VVh);
  VVh [u1, u2, u3, p];
  u1[] =A^-1*b;

  //Coupure cube
  fespace V2d(T2d, P2);
  V2d ux=u1(x,0.5,y);
  V2d uz=u3(x,0.5,y);
  V2d p2=p(x,0.5,y);

  //Plot coupure
  plot([ux,uz],value=true ,cmm=" cut y = 1");
  //Plot p
  plot(p,wait=1,value=true,nbiso=10);
}
