real s0=clock();
// mesh Th=square(20,20);



// Cas test 1
func uExacteX = x;
func uExacteY = -y;
func pExacte = x + y - 2*sqrt(2);



for (int k=0;k<2;++k) // Pour k=7, ça devient trop gros
{
  int n = 10*2^k; // Nombre de points par côté

  border Gamma1(t=0,1) {x=t; y=0;};
  border Gamma2(t=0,1) {x=1-t; y=t;};
  border Gamma3(t=0,1) {x=0; y=1-t;};
  mesh Th = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n));

  fespace Xh(Th,P2),Mh(Th,P1);
  Xh u1,u2,v1,v2;
  Mh p,q,ppp;
  varf bx(u1,q) =int2d(Th)( (dx(u1)*q));
  varf by(u1,q) =int2d(Th)((dy(u1)*q));
  varf mp(p,q)=int2d(Th)( p*q );
  varf a(u1,u2)=int2d(Th)(dx(u1)*dx(u2)+dy(u1)*dy(u2) )
  + on(Gamma1, Gamma2, Gamma3, u1=uExacteX, u2=uExacteY);

  Xh bc1;
  bc1[] = a(0,Xh);
  Xh b;

  //matrix A= a(Xh,Xh,solver=CG);
  matrix A = a(Xh,Xh,solver=UMFPACK);
  matrix Bx = bx(Xh,Mh);
  matrix By = by(Xh,Mh);
  matrix M = mp(Mh,Mh,solver=UMFPACK);
  Xh bcx=1,bcy=0;
  func real[int] divup(real[int] &pp){
    int verb=verbosity;
    verbosity=0;
    b[]  = Bx'*pp;
    b[] += bc1[] .*bcx[];
    u1[] = A^(-1)*b[];
    b[]  = By'*pp;
    b[] += bc1[] .*bcy[];
    u2[] = A^-1*b[];
    ppp[] = Bx*u1[];
    ppp[] +=  By*u2[];
    verbosity=verb;
    return ppp[] ;
  };//Pressure Mass preconditionner
  func real[int] precM(real[int] & pp){
    ppp[] = M^-1*pp;
    return ppp[];
  };
  p=0;q=0;u1=0;v1=0;
  LinearCG(divup,p[],q[],eps=1.e-6,nbiter=50);
  //LinearCG(divup,p[],precon=precM,eps=1.e-6,nbiter=50);
  divup(p[]);
  plot([u1,u2],p,wait=1,value=true,coef=0.1);
}
